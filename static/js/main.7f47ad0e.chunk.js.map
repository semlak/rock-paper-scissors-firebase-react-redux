{"version":3,"sources":["img/user.png","rpsLogo.png","actions/types.js","gameStatuses.js","reducers/index.js","reducers/authReducer.js","reducers/gatheringReducer.js","reducers/gameReducer.js","config/firebase.js","firebase.js","gathering.js","actions/game.js","components/LoadingSpinner.js","components/Game.js","actions/user.js","components/Navbar.js","actions/gatheringActions.js","components/requireAuth.js","components/SignIn.js","components/PlayerList.js","pages/Main.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","userActions","gatheringActions","gameActions","gameStatus","NO_GAME","GAME_STARTED","WAITING_FOR_BOTH_PLAYERS","PLAY_MADE_WAITING_FOR_OPPONENT","OPPONENT_PLAY_WAITING_FOR_USER","DETERMINING_ROUND_WINNER","GAME_ENDED","combineReducers","auth","state","arguments","length","undefined","action","type","payload","gathering","Object","objectSpread","onlinePlayers","game","gameStatuses","gameKey","gameData","myUid","opponentUid","player2","actionPayload","newGameStatus","playerPlay","playerAction","getGameStateAfterPlayMade","_state$gameData","player1Uid","player1","player2Uid","playerUid","console","log","key","concat","player","playerActions","round","defineProperty","player1Actions","player2Actions","getGameStateAfterPlayReceived","_action$payload","player1Wins","player2Wins","maxNumberOfGames","newRound","Math","abs","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firebase","initializeApp","refs","provider","GoogleAuthProvider","Gathering","randomName","random","toString","replace","substr","databaseReference","roomName","this","db","room","ref","encodeURIComponent","myName","user","updateStatus","uid","data","presenceRef","self","on","snap","val","onDisconnect","remove","set","join","displayName","_this","Promise","resolve","reject","child","push","leave","over","onUpdated","callback","numChildren","error","GamesRef","database","createPlayerActionListener","gameRef","dispatch","refString","snapshot","plays","keys","map","newGameListenerEvent","snapshotKey","snapshotVal","childRef","player1or2","opponent","gameUID","createEndGameListener","override","css","_templateObject","LoadingSpinner","props","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","displaySpinner","_this$props","loading","timeOut","timeOutRef","setTimeout","turnOffSpinner","setState","showSpinner","delayRef","setLoadingAndTimers","_this$state","clearTimeout","delay","currentTimeOutRef","currentDelayRef","loadingMessageClassName","loadingMessageStyle","loadingMessage","spinnerStyle","spinnerID","id","spinnerClassName","fadeIn","className","react_default","a","createElement","FadeLoader_default","sizeUnit","styles","size","color","style","React","Component","defaultProps","Game","getInitialState","play","e","target","value","_this$props$game$game","player1UID","player2UID","myUID","match","makePlay","endCurrentGame","endGame","render","opponentName","myWins","opponentWins","ties","spinnerProps","textAlign","marginTop","activeCardBody","reactstrap_es","Fragment","onClick","disabled","display","_this$props$game$game2","player1Name","player2Name","playInProgress","name","wins","_ref","connect","_ref3","players","then","catch","GameKey","gameValRef","Error","signIn","signInWithPopup","AppNavbar","toggle","bind","assertThisInitialized","isOpen","userSignIn","signOutAction","signOut","userSignOut","userMenu","nav","inNavbar","caret","src","photoURL","width","height","alt","right","divider","outline","light","expand","dark","href","rpsLogo","navbar","leaveGathering","authRef","currentUser","requireAuth","ComposedComponent","Authentication","_Component","apply","inherits","createClass","context","router","history","nextProps","contextTypes","PropTypes","object","Signin","preventDefault","defaultUserImage","selectPlayer","Array","isArray","defaultPlayerImage","Main","requestGame","find","joinGathering","_this$props2","appStatus","appHeaderText","components_Game","PlayerList","inGame","count","otherPlayer","newGame","gameInProgress","err","UnconnectedApp","_getPrototypeOf2","_len","args","_key","componentDidMount","fetchUser","process","BrowserRouter","basename","Navbar","Route","exact","path","component","SignIn","onAuthStateChanged","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.7f47ad0e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user.160c68fc.png\";","module.exports = __webpack_public_path__ + \"static/media/rpsLogo.94b40bc8.png\";","export const userActions = {\n  FETCH_USER: 'FETCH_USER',\n  SIGNIN_REQUEST: 'SIGNIN_REQUEST',\n  SIGNIN_SUCCESSFUL: 'SIGNIN_SUCCESSFUL',\n  SIGNIN_ERROR: 'SIGNIN_ERROR',\n  SIGNOUT_SUCCESSFUL: 'SIGNOUT_SUCCESSFUL',\n  SIGNOUT_REQUEST: 'SIGNOUT_REQUEST',\n  SIGNOUT_ERROR: 'SIGNOUT_ERROR',\n};\n\nexport const gatheringActions = {\n  FETCH_PLAYERS: 'FETCH_PLAYERS',\n  JOIN_GATHERING: 'JOIN_GATHERING',\n  LEAVE_GATHERING: 'LEAVE_GATHERING',\n};\n\nexport const gameActions = {\n  GAME_REQUESTED: 'GAME_REQUESTED',\n  GAME_CREATED: 'GAME_CREATED',\n  GAME_STARTED: 'GAME_STARTED',\n  GAME_ENDED: 'GAME_ENDED',\n  MAKE_PLAY: 'MAKE_PLAY',\n  PLAY_IN_PROGRESS: 'PLAY_IN_PROGRESS',\n  PLAY_RECEIVED: 'PLAY_RECEIVED',\n  ROUND_OUTCOME: 'ROUND_OUTCOME',\n};\n","// export const GAME_IN_PROGRESS = 'GAME_IN_PROGRESS';\n\nconst gameStatus = {\n  NO_GAME: 'NO_GAME',\n\n  // Game has began, but no other player actions have taken place yet\n  GAME_STARTED: 'GAME_STARTED',\n\n  // Neither player has made a move since the last round was resolved. This could be used to avoide 'GAME_STARTED' from being necessary\n  WAITING_FOR_BOTH_PLAYERS: 'WAITING_FOR_BOTH_PLAYERS',\n\n  // The player has made their move, and app is waiting for opponent. The app should disable user's ability to make another play while waiting\n  PLAY_MADE_WAITING_FOR_OPPONENT: 'PLAY_MADE_WAITING_FOR_OPPONENT',\n\n  // The player's opponent has made move and is waiting for user to still play\n  OPPONENT_PLAY_WAITING_FOR_USER: 'OPPONENT_PLAY_WAITING_FOR_USER',\n\n  // Both players have made their play. App is determining winner. Neither player should be able to make their next move during this status\n  DETERMINING_ROUND_WINNER: 'DETERMINING_ROUND_WINNER',\n\n  // Game is ended. Either due to player selecting to end the game, or because either player has won enough games to win the match (default is best of 5 rounds)\n  GAME_ENDED: 'GAME_ENDED',\n};\n\nexport default gameStatus;\n","import { combineReducers } from \"redux\";\n\n// import data from \"./dataReducer\";\nimport auth from './authReducer';\nimport gathering from './gatheringReducer';\nimport game from './gameReducer';\n\nexport default combineReducers({\n  // data,\n  auth,\n  gathering,\n  game,\n});\n","// import { FETCH_USER } from '../actions/types';\nimport { userActions } from '../actions/types';\n\n// export default (state = false, action) => {\nexport default (state = null, action) => {\n  // console.log('in auth reducer, state:', state, 'action:', action);\n  // if (Object.keys(userActions).indexOf(action.type) > -1) {\n  //   console.log('in auth reducer, state:', state, 'action:', action);\n  // }\n  switch (action.type) {\n    case userActions.FETCH_USER:\n      return action.payload || null;\n    default:\n      return state;\n  }\n};\n","// import { FETCH_PLAYERS, JOIN_GATHERING, LEAVE_GATHERING } from \"../actions/types\";\nimport { gatheringActions } from '../actions/types';\n\nexport default (state = {}, action) => {\n  // console.log('received dispatch in Gathering reducer, state:', state, 'action:', action);\n  // if ([FETCH_PLAYERS, JOIN_GATHERING, LEAVE_GATHERING].indexOf(action.type) > -1) {\n  // if (Object.keys(gatheringActions).indexOf(action.type) > -1) {\n  //   console.log('received dispatch in Gathering reducer, state:', state, 'action:', action);\n  // }\n  switch (action.type) {\n    case gatheringActions.JOIN_GATHERING:\n      return action.payload;\n    case gatheringActions.FETCH_PLAYERS:\n      return { ...state, onlinePlayers: action.payload };\n    case gatheringActions.LEAVE_GATHERING:\n      return {};\n    default:\n      return state;\n  }\n};\n","import {\n  // GAME_CREATED,\n  // GAME_STARTED,\n  // GAME_ENDED,\n  // MAKE_PLAY,\n  // PLAY_RECEIVED,\n  gameActions,\n} from \"../actions/types\";\nimport gameStatuses from '../gameStatuses';\n\nconst getGameStateAfterPlayMade = (state, actionPayload) => {\n  // if (actionPayload && actionPayload.status === 'attempted') {\n  const { gameStatus } = state;\n  const newGameStatus = gameStatus === gameStatuses.OPPONENT_PLAY_WAITING_FOR_USER ? gameStatuses.DETERMINING_ROUND_WINNER : gameStatuses.PLAY_MADE_WAITING_FOR_OPPONENT;\n  const newState = { ...state, gameStatus: newGameStatus, playerPlay: actionPayload.playerAction };\n  // console.log('returning newState', newState);\n  return newState;\n  // }\n  // else {\n  //   return state;\n  // }\n};\n\nconst getGameStateAfterPlayReceived = (state, actionPayload) => {\n  // console.log('in getGameStateAfterPlayReceived, actionPayload', actionPayload);\n  // const { gameStatus } = state;\n  // const newGameStatus = gameStatus === gameStatuses.PLAY_MADE_WAITING_FOR_OPPONENT ? gameStatuses.DETERMINING_ROUND_WINNER : gameStatuses.OPPONENT_PLAY_WAITING_FOR_USER;\n  // const newState = { ...state, gameStatus: newGameStatus, playerPlay: actionPayload.playerAction };\n  // const { currentGameData } = state;\n  const { player1: player1Uid, player2: player2Uid } = state.gameData;\n  const { playerUid } = actionPayload;\n  // console.log('key', actionPayload.player, 'player1Uid', player1Uid, 'player2Uid', player2Uid);\n  if (playerUid !== player1Uid && playerUid !== player2Uid) {\n    console.log('returning early from getGameStateAfterPlayReceived');\n    return state;\n  }\n  // const \n  // const myUid = \n  // const player1or2 = myUid === player1 ? 'player1' : 'player2';\n  \n  // console.log('key', key);\n  // const { playerUid } = actionPayload;\n  // const { myUid, opponentUid } = state;\n  const { myUid, } = state;\n  const key = `${actionPayload.player}Actions`;\n  const playerActions = state.gameData.round >= actionPayload.playerActions.length ? actionPayload.playerActions : state.gameData[key];\n  // const gameData = { ...state.gameData, [key]: actionPayload.playerActions };\n\n  const gameData = { ...state.gameData, [key]: playerActions };\n  // const gameData = { ...state.gameData, [key]: actionPayload.length <= state.gameData.round ? actionPayload.playerActions : state.gameData[key] };\n  // const newGameStatus = gameStatus;\n  // console.log('gameData:', gameData);\n  // console.log('playerUid', playerUid, 'myUid', myUid, 'check:', playerUid === myUid);\n  const newGameStatus = gameData.player1Actions.length === gameData.player2Actions.length ?\n    gameStatuses.DETERMINING_ROUND_WINNER :\n    playerUid === myUid ? gameStatuses.PLAY_MADE_WAITING_FOR_OPPONENT : gameStatuses.OPPONENT_PLAY_WAITING_FOR_USER;\n  const newState = { ...state, gameStatus: newGameStatus, gameData };\n  // const newState = { ...state, gameStatus: newGameStatus, [key]: actionPayload.playerActions };\n  // console.log('returning newState', newState);\n  return newState;\n};\n\n// export default (state = { gameStatus: gameStatuses.GAME_STARTED }, action) => {\nexport default (state = { gameStatus: gameStatuses.NO_GAME }, action) => {\n  // if ([GAME_CREATED, GAME_STARTED, GAME_ENDED, MAKE_PLAY, PLAY_RECEIVED].indexOf(action.type) > -1) {\n  // if (Object.keys(gameActions).indexOf(action.type) > -1) {\n  //   console.log('received game action dispatch in gameReducer, state:', state, 'action', action);\n  // }\n  // if (Object.keys(gameActions).indexOf(action.type) > -1) {\n  //   console.log('received game action dispatch in gameReducer, state:', state, 'action', action);\n  // }\n  switch (action.type) {\n    // case GAME_CREATED:\n    //   // GAME_CREATED is signaled after creation of game. It is separate from the GAME_STARTED signal that listens for every game created and signals if the user is one of the players for that game\n    //   console.log('detected GAME_CREATED');\n    //   return state;\n    //   // return action.payload;\n    case gameActions.GAME_STARTED:\n      // console.log('detected GAME_STARTED');\n      return { ...state, gameKey: action.payload.gameKey, gameData: action.payload.gameData, gameStatus: gameStatuses.GAME_STARTED, myUid: action.payload.myUid, opponentUid: action.payload.gameData.player2 };\n    //   return action.payload;\n    case gameActions.GAME_ENDED:\n      return { ...state, gameKey: null, gameData: null, gameStatus: gameStatuses.GAME_ENDED };\n    case gameActions.MAKE_PLAY:\n      // console.log('detected MAKE_PLAY, action', action);\n      // return state;\n      // return { ...state, gameStatus: gameStatus.\n      return getGameStateAfterPlayMade(state, action.payload);\n    case gameActions.PLAY_RECEIVED:\n      // console.log('deteced PLAY_RECEIVED, action', action);\n      // return state;\n      return getGameStateAfterPlayReceived(state, action.payload);\n    case gameActions.ROUND_OUTCOME:\n      // const newGameData = { ...state.gameData, round: \n      const { player1Wins, player2Wins, maxNumberOfGames, round } = action.payload;\n      const gameOver = player1Wins + player2Wins >= maxNumberOfGames && Math.abs(player1Wins - player2Wins) >= 2;\n      const newRound = gameOver ? round : round + 1;\n      // const newRound = action.payload.player1Actions.length + 1\n      return { ...state, gameData: { ...action.payload, round: newRound }, gameStatus: gameStatuses.WAITING_FOR_BOTH_PLAYERS };\n    default:\n      return state;\n  }\n};\n","\nconst config = {\n  apiKey: \"AIzaSyBkyF3iDkn4oj30QNEJ8vsnIF57PY0xki0\",\n  authDomain: \"rps-game-d93c5.firebaseapp.com\",\n  databaseURL: \"https://rps-game-d93c5.firebaseio.com\",\n  projectId: \"rps-game-d93c5\",\n  storageBucket: \"rps-game-d93c5.appspot.com\",\n  messagingSenderId: \"131891175803\"\n};\n\nexport default config;\n","import firebase from 'firebase/app';\nimport 'firebase/database';\nimport 'firebase/auth';\n\nimport config from './config/firebase';\n// Initialize Firebase\nfirebase.initializeApp(config);\n\nexport const refs = {\n  gathering: 'OnlineUsers',\n  games: 'Games',\n};\n\n\nexport const provider = new firebase.auth.GoogleAuthProvider();\n// export const authRef = firebase.auth();\nexport default firebase;\n","/**\n * A Javascript module to keep list (and count) of online users in a Firebase web app - by isolated rooms or globally.\n *\n * Initial idea from - http://stackoverflow.com/a/15982583/228648\n *\n * @url : https://gist.github.com/ajaxray/17d6ec5107d2f816cc8a284ce4d7242e\n * @auther : Anis Uddin Ahmad <anis.programmer@gmail.com>\n *\n * w:ajaxray.com | t:@ajaxray\n */\nvar Gathering = (function() {\n\n    var randomName = function () {\n        return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n    };\n\n    function Gathering(databaseReference, roomName) {\n\n        this.db = databaseReference;\n        this.roomName = roomName || 'globe';\n\n        this.room = this.db.ref(\"gatherings/\" + encodeURIComponent(this.roomName));\n        this.myName = '';\n        this.user = null;\n\n        this.updateStatus = function(uid, data) {\n            this.myName = data;\n            var presenceRef = this.db.ref(\".info/connected\");\n            var self = this;\n            presenceRef.on(\"value\", function(snap) {\n                if (snap.val() && self.user) {\n                    self.user.onDisconnect().remove();\n                    self.user.set(self.myName);\n                }\n            });\n        }\n\n        // this.join = function(uid, displayName) {\n        //     if(this.user) {\n        //         // console.error('Already joined.');\n        //         console.log('Already joined.');\n        //         return false;\n        //     }\n\n        //     this.myName = displayName || 'Anonymous - '+ randomName();\n        //     this.user = uid ? this.room.child(uid) : this.room.push();\n\n        //     // Add user to presence list when online.\n        //     var self = this;\n        //     var presenceRef = this.db.ref(\".info/connected\");\n        //     presenceRef.on(\"value\", function(snap) {\n        //         if (snap.val()) {\n        //             self.user.onDisconnect().remove();\n        //             self.user.set(self.myName);\n        //         }\n        //     });\n\n        //     return this.myName;\n        // };\n\n        this.join = function(uid, displayName) {\n            return new Promise((resolve, reject) => {\n            if(this.user) {\n                // console.error('Already joined.');\n                console.log('Already joined.');\n                // return false;\n                resolve ( false );\n            }\n\n            this.myName = displayName || 'Anonymous - '+ randomName();\n            this.user = uid ? this.room.child(uid) : this.room.push();\n\n            // Add user to presence list when online.\n            var self = this;\n            var presenceRef = this.db.ref(\".info/connected\");\n            presenceRef.on(\"value\", function(snap) {\n                if (snap.val()) {\n                    self.user.onDisconnect().remove();\n                    self.user.set(self.myName);\n                }\n            });\n\n            // return this.myName;\n            resolve ( this.myName );\n            });\n        }\n\n        this.leave = function() {\n            this.user.remove();\n            this.myName = '';\n        };\n\n        this.over = function () {\n            this.room.remove();\n        };\n\n        this.onUpdated = function (callback) {\n            if('function' == typeof callback) {\n                this.room.on(\"value\", function(snap) {\n                    callback(snap.numChildren(), snap.val());\n                });\n            } else {\n                console.error('You have to pass a callback function to onUpdated(). That function will be called (with user count and hash of users as param) every time the user list changed.');\n            }\n        };\n    }\n\n    return Gathering;\n})();\n\nexport default Gathering;\n","// import firebase from '../firebase';\nimport firebase, { refs } from '../firebase';\n// import { gatheringRef } from '../firebase';\n// import Gathering from '../gathering';\nimport {\n  gameActions,\n} from './types';\n\n// const GamesRef = firebase.database().ref(refs.games);\nexport const GamesRef = () => firebase.database().ref(refs.games);\nexport const GamesRefChild = (childRef) => firebase.database().ref(`${refs.games}/${childRef}`);\n\nexport const endGame = gameUID => dispatch => {\n  // console.log('GamesRef', GamesRef && GamesRef().toString());\n  // Object.keys(GamesRef()).forEach(key => console.log('GamesRef key:', key, 'value:', GamesRef()[key] && GamesRef()[key].toString()));\n  return GamesRef().child(gameUID).remove()\n    .then(() => {\n      // console.log('removed game, ref:', gameUID);\n      dispatch({\n        type: gameActions.GAME_ENDED,\n        payload: { gameUID },\n      });\n    })\n    .catch(error => {\n      // console.log('error removing game');\n      dispatch({\n        type: gameActions.GAME_ENDED,\n        payload: { error: error.toString() },\n      });\n    });\n  // GamesRef().child(app.gameID).remove();\n};\n\nexport const createEndGameListener = gameRef => dispatch => {\n  console.log('in createEndGameListener');\n  return gameRef.child('gameInProgress').on('value', (snapshot) => {\n    console.log('received endGame indicator from firebase, snapshot.val()', snapshot.val());\n    if (snapshot.val() == null || !snapshot.val()) {\n      const gameUID = gameRef.key;\n      dispatch({\n        type: gameActions.GAME_ENDED,\n        payload: { gameUID }\n      });\n    }\n  });\n};\n\n\n// const createOpponentActionListener = (dispatch, opponent) => {\n// const createOpponentActionListener = (gameRef, opponent) => dispatch => {\n//   // this is where the app checks for (or waits for) an opponent action\n//   // opponent is string that says 'player1' or 'player2'\n//   const refString = `${opponent}Actions`;\n//   console.log('creating opponent action listener', refString);\n//   return gameRef.child(refString).on('value', (snapshot) => {\n//     console.log('received updated on opponent action, snapshot.val()', snapshot.val());\n//     const play = snapshot.val();\n//     if (play && Object.keys(play).length === 1) {\n//       dispatch({\n//         type: gameActions.PLAY_RECEIVED,\n//         payload: { player: opponent, play: Object.keys(play)[0] }\n//       });\n//     }\n//   });\n// };\n\nconst createPlayerActionListener = (gameRef, player) => dispatch => {\n  // this is where the app checks for (or waits for) a player action\n  // player is string that says 'player1' or 'player2'\n  const refString = `${player}Actions`;\n  console.log('creating player action listener', refString);\n  return gameRef.child(refString).on('value', (snapshot) => {\n    console.log('received updated on player action, snapshot.val()', snapshot.val());\n    const plays = snapshot.val();\n    const playerActions = plays && Object.keys(plays).length > 0 ? Object.keys(plays).map(key => plays[key]) : [];\n    // if (play && Object.keys(play).length === 1) {\n    if (playerActions.length > 0) {\n      dispatch({\n        type: gameActions.PLAY_RECEIVED,\n        payload: { player, playerActions }\n      });\n    }\n  });\n};\n\nexport const newGameListenerEvent = (myUid, snapshotKey, snapshotVal) => dispatch => {\n  // console.log('in newGameListenerEvent, myUid', myUid, 'snapshotVal', snapshotVal);\n  // return GamesRef().on(\"child_added\", (snapshot) => {\n  const game = snapshotVal;\n  // console.log('detected new game added to GamesRef, myUid:', myUid, 'game:', game);\n  if ((game.player1 === myUid || game.player2 === myUid) && myUid.length > 1) {\n    console.log('new game is my game');\n    // would like to add a check here or somewhere that prevents me from starting a game if I'm in an existing one.\n    const player1Actions = game.player1Actions ? Object.keys(game.player1Actions).map(key => game.player1Actions[key]) : [];\n    const player2Actions = game.player2Actions ? Object.keys(game.player2Actions).map(key => game.player2Actions[key]) : [];\n    const gameData = { ...game, player1Actions, player2Actions };\n    dispatch({\n      type: gameActions.GAME_STARTED,\n      // payload: { gameKey: snapshotKey, gameData: game }\n      payload: { gameKey: snapshotKey, gameData, myUid }\n    });\n    // const { player1, player2 } = game;\n    const { player1 } = game;\n    const player1or2 = myUid === player1 ? 'player1' : 'player2';\n    const opponent = myUid !== player1 ? 'player1' : 'player2';\n    // const gameRef = GamesRef().child(snapshotKey);\n    const gameRef = GamesRefChild(snapshotKey);\n\n    // createGameListener(GamesRef().child(snapshot.key), player1or2);\n    // createOpponentActionListener(dispatch, opponent);\n    dispatch(createEndGameListener(gameRef));\n    // dispatch(createOpponentActionListener(gameRef, opponent));\n    dispatch(createPlayerActionListener(gameRef, opponent));\n    dispatch(createPlayerActionListener(gameRef, player1or2));\n  }\n  else {\n    console.log('new game is not my game');\n  }\n  // });\n};\n\n\nexport const createNewGameListener = myUid => dispatch => {\n  console.log('creating newGame listener, myUid', myUid);\n  // return dispatch(newGameListenerEvent(myUid\n  return GamesRef().on('child_added', (snapshot) => {\n    console.log('newGameListener fired, myUid:', myUid);\n    return dispatch(newGameListenerEvent(myUid, snapshot.key, snapshot.val()));\n  });\n  // return GamesRef().on(\"child_added\", (snapshot) => {\n  //   const game = snapshot.val();\n  //   console.log('detected new game added to GamesRef, myUid:', myUid, 'game:', game);\n  //   if (game.player1 === myUid || game.player2 === myUid) {\n  //     console.log('new game is my game');\n  //     // would like to add a check here or somewhere that prevents me from starting a game if I'm in an existing one.\n  //     dispatch({\n  //       type: gameActions.GAME_STARTED,\n  //       payload: { gameKey: snapshot.key, gameData: game }\n  //     });\n  //     // const { player1, player2 } = game;\n  //     const { player1 } = game;\n  //     // const player1or2 = myUid === player1 ? 'player1' : 'player2';\n  //     const opponent = myUid !== player1 ? 'player1' : 'player2';\n  //     const gameRef = GamesRef().child(snapshot.key);\n\n  //     // createGameListener(GamesRef().child(snapshot.key), player1or2);\n  //     // createOpponentActionListener(dispatch, opponent);\n  //     dispatch(createEndGameListener(gameRef));\n  //     dispatch(createOpponentActionListener(gameRef, opponent));\n  //   }\n  //   else {\n  //     console.log('new game is not my game');\n  //   }\n  // });\n};\n\n// export const createGameListener = (gameRef, player1or2) => dispatch => {\n//   // console.log('creating listener for gameRef', gameRef);\n//   // GameRef = gameRef;\n//   gameRef.on('value', (snapshot) => {\n//     console.log('received update for game, snapshot.val()', snapshot.val());\n//   });\n//   // GameRef.on\n// };\n\n\nexport const updateWithRoundOutcome = (gameData) => (dispatch) => {\n   \n  // const refString = `${player}Actions`;\n  // console.log('creating player action listener', refString);\n  // console.log('in updateWithRoundOutcome, gameData:', gameData);\n  return dispatch({\n    type: gameActions.ROUND_OUTCOME,\n    payload: gameData\n  });\n};\n\nexport const getRoundOutcome = (GameKey) => (dispatch) => {\n   \n  // const refString = `${player}Actions`;\n  // console.log('creating player action listener', refString);\n  const GameRef = GamesRef().child(GameKey);\n  return GameRef.once('value', (snapshot) => {\n    console.log('received updated gameData from updateWithOutcome, snapshot.val()', snapshot.val());\n    const gameData = snapshot.val();\n    // const playerActions = plays && Object.keys(plays).length > 0 ? Object.keys(plays).map(key => plays[key]) : [];\n    // if (play && Object.keys(play).length === 1) {\n    // if (playerActions.length > 0) {\n    return dispatch({\n      type: gameActions.ROUND_OUTCOME,\n      payload: { gameData }\n    });\n  });\n};\n\nexport const makePlay = (GameKey, player1or2, playerAction) => dispatch => {\n  console.log('in makePlay, gameRef:', GameKey, 'player1or2', player1or2, 'playerAction', playerAction);\n  const gameValRef = `${player1or2}Actions`;\n  console.log('player1or2:', player1or2, 'gameValRef', gameValRef);\n  if (player1or2 && playerAction) {\n    dispatch({\n      type: gameActions.MAKE_PLAY,\n      payload: { player1or2, playerAction },\n    });\n    const GameRef = GamesRef().child(GameKey);\n    // const GameRef = Games\n\n    // only submit the move if the current count of playerMoves in firebase is less than the current round\n    // return GameRef.child(gameValRef).\n\n    return GameRef.child(gameValRef).push(playerAction)\n      .then(ref => {\n        console.log('added player action, playerAction:', playerAction, 'gameValRef', gameValRef, 'ref:', ref);\n      });\n  }\n  else {\n    return Promise.reject(new Error('unable to make play'));\n  }\n\n  // // This is for only having a single player move recorded in Firebase, and just updating on each round. I replaced this with a collection of moves, one for each round\n  // return GameRef.update({\n  //   // [player1or2 + \"_Actions\"]: playerAction\n  //   [gameValRef]: playerAction\n  // }).then((playActionRef) => {\n  //   console.log('playActionRef', playActionRef);\n  //   // this.setState({ playInProgress: true });\n  // });\n};\n\nexport const requestGame = (user, otherPlayer) => dispatch => {\n  // console.log('in requestGame action request, user:', user, 'otherPlayer', otherPlayer);\n  dispatch({\n    type: gameActions.GAME_REQUESTED,\n    payload: { user, otherPlayer }\n  });\n\n  const { uid: player1, displayName: player1Name } = user;\n  // console.log('player1', player1);\n  const maxNumberOfGames = 5;\n  \n  const { uid: player2, displayName: player2Name } = otherPlayer;\n  if (player1 && player2 && player1.length > 0 && player2.length > 0) {\n    // console.log('creating game');\n    const newGame = {\n      player1,\n      player2,\n      player1Wins: 0,\n      player2Wins: 0,\n      player1Name,\n      player2Name,\n      ties: 0,\n      maxNumberOfGames,\n      gameInProgress: true,\n      round: 1,\n    };\n    // console.log('GamesRef():', GamesRef().toString());\n    // Object.keys(GamesRef()).forEach(key => console.log('GamesRef key:', key, 'value:', GamesRef()[key] && GamesRef()[key].toString()));\n    // return Promise.resolve(true);\n    return GamesRef().push(newGame)\n      .then(() => {\n      // .then(ref => {\n        // console.log('created new game, key is', ref.key);\n        // return Promise.resolve(true);\n        // rather than dispatch message, will use the firebase listener for new games to signal the new game\n        // that way, the user will be notified of games created by other users as well as one the user creates.\n        return dispatch({ type: gameActions.GAME_CREATED });\n      // });\n      })\n      .catch(err => {\n        console.log('error when creating new game', err);\n        return Promise.reject(err);\n      });\n  }\n  else {\n    console.log('not creating new game');\n    return Promise.reject(new Error('not creating new game'));\n  }\n};\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// import { css } from 'react-emotion';\n// import { css } from 'react-emotion';\nimport { css, jsx } from '@emotion/core';\nimport styled from '@emotion/styled';\nimport FadeLoader from 'react-spinners/FadeLoader';\n// import { Modal, ModalBody } from 'reactstrap';\n\n\n// const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst override = css`\n    display: block;\n    margin: 0 auto;\n    border-color: #276582;\n`;\n\n\n// const override = styled.div`\n//     display: block;\n//     margin: 0 auto;\n//     border-color: #276582;\n// `;\n\n\nclass LoadingSpinner extends React.Component {\n  constructor(props) {\n    super(props);\n    // console.log('in LoadingSpinner constructor. props:', props);\n    this.state = {\n      showSpinner: false,\n      timeOutRef: null,\n      delayRef: null,\n    };\n    // this.setLoadingAndTimers(props);\n    // const { delay, timeOut, loading } = props;\n\n    // // only show spinner right away if loading is set to true AND delay is 0.\n    // const showSpinner = loading && !(delay > 0);\n    // // only set a delay for the spinner if the spinner should otherwise be shown and delay > 0\n    // const delayRef = loading && delay > 0 ? setTimeout(this.displaySpinner, delay) : null;\n    // // only set a timeOut for the spinner if the spinner is set to be shown right away (no delay)\n    // const timeOutRef = showSpinner && timeOut > 0 ? setTimeout(this.turnOffSpinner, timeOut) : null;\n\n\n    // console.log('LoadingSpinner state after constructor', this.state, '\\nprops:', props);\n  }\n\n  componentDidMount() {\n    // console.log('in \"LoadingSpinner.componentDidMount\", props:', this.props, '\\nstate:', this.state);\n    const { props } = this;\n    this.setLoadingAndTimers(props);\n  }\n\n  componentWillReceiveProps(props) {\n    // console.log('in \"LoadingSpinner.componentWillReceiveProps\", props:', props, '\\nstate:', this.state);\n    // const { loading, } = props;\n    // this.setState({ showSpinner: loading });\n    this.setLoadingAndTimers(props);\n  }\n\n  componentWillUnmount() {\n    // console.log('Unmounting LoadingSpinner component', this.props.id, this.props.className);\n    const { timeOutRef, delayRef } = this.state;\n    if (timeOutRef) {\n      clearTimeout(timeOutRef);\n    }\n    if (delayRef) {\n      clearTimeout(delayRef);\n    }\n  }\n\n  setLoadingAndTimers(props) {\n    const { delay, timeOut, loading } = props;\n\n    // if not current set to loading, clear out any timeOut references\n    const { timeOutRef: currentTimeOutRef, delayRef: currentDelayRef } = props;\n    if (!loading) {\n      if (currentTimeOutRef != null) {\n        clearTimeout(currentTimeOutRef);\n      }\n      if (currentDelayRef != null) {\n        clearTimeout(currentDelayRef);\n      }\n    }\n\n    // only show spinner right away if loading is set to true AND delay is 0.\n    const showSpinner = loading && !(delay > 0);\n    // only set a delay for the spinner if the spinner should otherwise be shown and delay > 0\n    const delayRef = loading && delay > 0 ? setTimeout(this.displaySpinner, delay) : null;\n    // only set a timeOut for the spinner if the spinner is set to be shown right away (no delay)\n    const timeOutRef = showSpinner && timeOut > 0 ? setTimeout(this.turnOffSpinner, timeOut) : null;\n\n    this.setState({\n      showSpinner,\n      timeOutRef,\n      delayRef,\n    });\n  }\n\n  displaySpinner = () => {\n    // console.log('running \"LoadingSpinner.displaySpinner\"');\n    const { loading, timeOut } = this.props;\n    if (loading) {\n      const timeOutRef = !(timeOut > 0) ? null : setTimeout(this.turnOffSpinner, timeOut);\n      this.setState({ showSpinner: true, delayRef: null, timeOutRef });\n    }\n    else {\n      // console.log('displaySpinner should no longer be displayed');\n      this.setState({ showSpinner: false, delayRef: null, timeOutRef: false });\n    }\n  }\n\n  turnOffSpinner = () => {\n    // console.log('running \"LoadingSpinner.turnOffSpinner\"', '\\nprops:', this.props);\n    this.setState({ showSpinner: false, timeOutRef: null });\n  }\n\n\n  render() {\n    const { showSpinner } = this.state;\n    const { props } = this;\n    const { loadingMessageClassName, loadingMessageStyle, loadingMessage } = props;\n    const { spinnerStyle, id: spinnerID } = props;\n    const spinnerClassName = props.fadeIn ? `${props.className} fade-in` : props.className;\n    console.log('override', override);\n    // const messageFullClassName = props.fade\n    // if (props.fadeIn) loadingMessageClassName += ' fade-in';\n    // const loadingMessageProps = { loadingMessageClassName, loadingMessageStyle, loadingMessage };\n    // console.log('rending LoadingSpinner', 'id:', props.id, '\\nprops:', props);\n    if (showSpinner) {\n      return (\n        <div className={spinnerClassName} id={spinnerID}>\n          <FadeLoader\n            sizeUnit=\"px\"\n            className={override.styles}\n            size={60}\n            color='#276582'\n            loading={showSpinner}\n            style={spinnerStyle}\n          />\n          <div className={loadingMessageClassName} style={loadingMessageStyle}>{loadingMessage}</div>\n        </div>\n      );\n    }\n    else {\n      return <div />;\n    }\n  }\n}\n\n\nLoadingSpinner.defaultProps = {\n  // loading: false,\n  delay: 0,\n  timeOut: 0,\n  loadingMessage: '',\n  loadingMessageClassName: '',\n  loadingMessageStyle: {},\n  className: '',\n  spinnerStyle: {},\n  fadeIn: false,\n  id: '',\n};\n\nLoadingSpinner.propTypes = {\n  // ones that don't have .isRequired are optional\n  delay: PropTypes.number,\n  timeOut: PropTypes.number,\n  loading: PropTypes.bool.isRequired,\n  loadingMessage: PropTypes.string,\n  loadingMessageClassName: PropTypes.string,\n  loadingMessageStyle: PropTypes.object,\n  className: PropTypes.string,\n  spinnerStyle: PropTypes.object,\n  fadeIn: PropTypes.bool,\n  id: PropTypes.string,\n  // exchangeRate: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  // category: PropTypes.string.isRequired,\n  // expenseCategories: PropTypes.array.isRequired,\n  // handleInputChange: PropTypes.func.isRequired,\n  // handleDivChange: PropTypes.func.isRequired,\n  // submitForm: PropTypes.func.isRequired,\n  // handleInputChangeForNumberFormatField: PropTypes.func.isRequired,\n  // currentUser: PropTypes.object,\n};\n\nexport default LoadingSpinner;\n","import React, { Component } from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  // CardTitle,\n  CardText,\n  CardFooter,\n  CardHeader,\n} from 'reactstrap';\nimport { connect } from 'react-redux';\n\n// import firebase from '../firebase';\nimport LoadingSpinner from './LoadingSpinner';\nimport { endGame, makePlay } from '../actions/game';\nimport gameStatuses from '../gameStatuses';\n\n\nclass Game extends Component {\n  state = this.getInitialState();\n\n  getInitialState() {\n    const { user } = this.props;\n    const {\n      // gameInProgress,\n      // maxNumberOfGames,\n      player1: player1UID,\n      player2: player2UID,\n      player1Wins,\n      player2Wins,\n      player1Name,\n      player2Name,\n      ties,\n      playInProgress,\n    } = this.props.game.gameData;\n    // const { uid: myUID, displayName: myName } = user;\n    const { uid: myUID, } = user;\n    // console.log(`player1UID ${player1UID}, player2UID ${player2UID}, myUID ${myUID}, player1UID === myUID: ${player1UID === myUID}`);\n    const player1 = { uid: player1UID, name: player1Name, wins: player1Wins };\n    const player2 = { uid: player2UID, name: player2Name, wins: player2Wins };\n    // const { uid: opponentUID, name: opponentName, wins: opponentWins } = player1UID === myUID ? player2 : player2UID === myUID ? player1 : null;\n    const { name: opponentName, wins: opponentWins } = player1UID === myUID ? player2 : player2UID === myUID ? player1 : {};\n    const { wins: myWins } = player1UID === myUID ? player1 : player2;\n    // const player1or2 = player1UID === myUID ? \"player1\" : \"player2\";\n\n    return ({\n      // myUID,\n      // opponentUID,\n      opponentName,\n      myWins,\n      opponentWins,\n      ties,\n      // maxNumberOfGames,\n      // gameInProgress,\n      // player1or2,\n      playInProgress,\n    });\n  }\n  \n  play = (e) => {\n    const { value: playerAction } = e.target;\n    // const player = playerid === game.player1 ? \"player1\" : \"player2\";\n    const { player1: player1UID, player2: player2UID } = this.props.game.gameData;\n    const { uid: myUID } = this.props.user;\n    const player1or2 = player1UID === myUID ? \"player1\" : player2UID === myUID ? \"player2\" : \"\";\n    // const { player1or2 } = this.state;\n    // console.log('e.target', e.target, 'playerAction ', playerAction);\n    // console.log('player1UID', player1UID, 'myUID', myUID, 'player1or2', player1or2, 'playerAction', playerAction);\n    if (playerAction.match(/(rock|paper|scissors)/) != null && player1or2 && player1or2.length > 1) {\n      const { gameKey } = this.props.game;\n      this.props.makePlay(gameKey, player1or2, playerAction);\n    }\n    else {\n      console.log('invalid playerAction or playerinfo', playerAction, player1or2);\n    }\n  }\n\n  endCurrentGame = () => {\n    console.log('ending current game');\n    if (this.props.endGame && this.props.gameUID) {\n      console.log('creating endGame action');\n      this.props.endGame(this.props.gameUID);\n    }\n  }\n\n  render = () => {\n    const {\n      opponentName,\n      // myUID,\n      // opponentUID,\n      myWins,\n      opponentWins,\n      ties,\n      // messages,\n      // maxNumberOfGames,\n      // gameInProgress,\n      // playInProgress,\n    } = this.state; \n\n    const { gameStatus } = this.props.game;\n    // const playEnabled = gameStatus !== gameStatuses.PLAY_MADE_WAITING_FOR_OPPONENT && gameStatus !== gameStatuses.DETERMINING_ROUND_WINNER;\n    const playEnabled = true;\n\n\n    // const loadingMessage = 'You played ...';\n    const loadingMessage = gameStatus;\n\n    // const loadingMessageClass = '\n    const loadingMessageStyle = { textAlign: 'center', marginTop: '1em', size: '22px' };\n    // const { loading, file } = this.state;\n    const playInProgress = !playEnabled;\n    // playInProgress = false;\n    const loading = playInProgress;\n    const spinnerProps = {\n      // loadingMessage,\n      loadingMessageStyle,\n      loading,\n      className: 'loading-viewer',\n      // delay: 500,\n      // fadeIn: true,\n      id: \"loading-spinner\",\n    };\n    console.log('spinnerProps', spinnerProps);\n\n\n    const activeCardBody = (\n      <CardBody className=\"\">\n        <p> Your Opponent: <span id=\"opponent-display-name\">{opponentName || \"Loading...\"}</span></p>\n        <p>\n          Your score: <span id=\"your-score\">{myWins}</span>\n        </p>\n        <p>\n          Opponent Score: <span id=\"opponent-score\">{opponentWins}</span>\n        </p>\n        <p>\n          Ties: <span id=\"ties\">{ties}</span>\n        </p>\n        { playInProgress ? <LoadingSpinner {...spinnerProps} /> :\n            <>\n              <Button color=\"primary\" className=\"mr-2 game-action\" onClick={this.play} value=\"rock\" disabled={!playEnabled}> Rock </Button>\n              <Button color=\"primary\" className=\"mr-2 game-action\" onClick={this.play} value=\"paper\" disabled={!playEnabled}> Paper </Button>\n              <Button color=\"primary\" className=\"mr-2 game-action\" onClick={this.play} value=\"scissors\" disabled={!playEnabled}> Scissors </Button>\n              <br />\n              <br />\n            </>\n        }\n        <Button color=\"danger\" onClick={this.endCurrentGame} id=\"end-game\">End Game</Button>\n      </CardBody>\n    );\n    // return <LoadingSpinner loading/>\n\n\n    return (\n      <Card className=\"border-success game\" style={{ display: \"block\" }} >\n        <CardHeader className=\"text-white bg-success bg\">\n          Your Active Game\n        </CardHeader>\n        {/* {playInProgress ? <LoadingSpinner {...spinnerProps} /> : activeCardBody} */}\n        {activeCardBody}\n        <CardFooter><CardText>{loadingMessage}</CardText></CardFooter>\n      </Card>\n    );\n  }\n}\n\n\nfunction mapStateToProps({ auth, gathering, game }) {\n  const onlinePlayers = gathering != null ? gathering.onlinePlayers || [] : [];\n  return {\n    user: auth,\n    gathering,\n    players: onlinePlayers,\n    game,\n    gameUID: game.gameKey,\n  };\n}\n\n\nexport default connect(mapStateToProps, { endGame, makePlay })(Game);\n","// import firebase, { authRef, provider, } from '../firebase';\nimport firebase, { provider, } from '../firebase';\n// import { authRef, provider, } from '../firebase';\nimport { leaveGathering } from './gatheringActions';\n// import { FETCH_USER } from './types';\nimport { userActions } from './types';\n// const auuthRef = firebase.auth();\n\nexport const fetchUser = () => dispatch => firebase.auth().onAuthStateChanged(user => {\n// export const fetchUser = () => dispatch => authRef.onAuthStateChanged(user => {\n// export const fetchUser = () => dispatch => firebase.auth().onAuthStateChanged(user => {\n  console.log('onAuthStateChanged triggered from fetchUser');\n  if (user) {\n    dispatch({\n      type: userActions.FETCH_USER,\n      payload: user\n    });\n  }\n  else {\n    dispatch({\n      type: userActions.FETCH_USER,\n      payload: null\n    });\n  }\n});\n\n// export const signIn = () => () => firebase.auth()\nexport const signIn = () => dispatch => firebase.auth()\n// export const signIn = () => dispatch => {\n// export const signIn = () => () => authRef\n  .signInWithPopup(provider)\n  // .then(result => {})\n  .then(() => {\n    // no need to dispatch auth signer, because then is done using the onAuthStateChanged event listener\n    dispatch({ type: userActions.SIGNIN_SUCCESSFUL });\n  })\n  .catch(error => {\n    dispatch({ type: userActions.SIGNIN_ERROR, payload: error });\n    console.log('signIn action error', error);\n  });\n\n\n// testable signOut function\n// handleSignOut() {\n//   if (firebase.auth().currentUser) {\n//     firebase.auth().signOut();\nexport const handleSignOut = () => dispatch => {\n// export const handleSignOut = () => {\n  // console.log('running handleSignOut action');\n  // console.log('authref', authRef.toString());\n  // Object.keys(authRef).forEach(key => console.log('authRef key:', key, 'value:', authRef[key] && authRef[key].toString()));\n  const authRef = firebase.auth();\n  // console.log('authref', authRef.toString());\n  // Object.keys(authRef).forEach(key => console.log('authRef key:', key, 'value:', authRef[key] && authRef[key].toString()));\n  // if (firebase.auth().currentUser) {\n  //   firebase.auth().signOut();\n  if (authRef.currentUser) {\n    authRef.signOut()\n      .then(() => {\n        // console.log('sign-out successful');\n        // return true;\n        // dispatch({ type: 'SIGNOUT_SUCCESSFUL' });\n        dispatch({ type: userActions.SIGNOUT_SUCCESSFUL });\n        return Promise.resolve(true);\n      })\n      .catch(error => {\n        // dispatch({ type: 'SIGNOUT_ERROR' });\n        // dispatch({ type: 'SIGNOUT_ERROR', payload: error });\n        dispatch({ type: userActions.SIGNOUT_ERROR, payload: error });\n        // console.log('signOut error', error);\n      });\n    return Promise.resolve(true);\n    // return true;\n  }\n  else {\n    // return false;\n    dispatch({ type: userActions.SIGNOUT_ERROR, payload: 'error on signout' });\n    return Promise.resolve(false);\n  }\n};\n\n\n// export const signOut = ({ auth: user, gathering }) => dispatch => {\nexport const signOut = ({ gathering }) => dispatch => {\n  // dispatch({ type: 'SIGNOUT_REQUEST' });\n  dispatch({ type: userActions.SIGNOUT_REQUEST });\n  // export const signOut = () => () => {\n  // console.log('received action request to signOut');\n  // console.log('gathering in signOut action', gathering);\n  // console.log('dispatch in signOut action', dispatch);\n  if (gathering && Object.keys(gathering).length > 0 && typeof gathering.leave === 'function') {\n    dispatch(leaveGathering(gathering));\n    // console.log('executed leaveGathering action, now signing out');\n  }\n  else {\n    console.log('not leaving gathering, because it does not appear to be defined');\n  }\n  \n  // return Promise.resolve(handleSignOut());\n  return dispatch(handleSignOut());\n};\n","import React from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  // NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Button,\n} from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { signIn, signOut } from '../actions/user';\n\n\nimport rpsLogo from '../rpsLogo.png';\n\nclass AppNavbar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      isOpen: false\n    };\n  }\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n  render() {\n    // const { user, login, logout } = this.props;\n    const { props } = this;\n    // const { auth, signIn: userSignIn, signOut: userSignOut } = this.props;\n    const { auth, signIn: userSignIn, signOut: signOutAction, gathering } = this.props;\n    console.log('gathering in Navbar component:', gathering);\n    // const userSignOut = () => signOutAction(gathering);\n    const userSignOut = () => signOutAction({ auth, gathering });\n    // const userSignOut = () => signOutAction(gathering);\n    // console.log('auth', auth);\n\n    const userMenu = auth ? (\n      <UncontrolledDropdown nav inNavbar>\n        <DropdownToggle nav caret>\n\n          {/* <img src=\"https://getbootstrap.com/docs/4.1/assets/brand/bootstrap-solid.svg\" width=\"30\" height=\"30\" alt=\"\" /> */}\n          <img src={auth.photoURL} width=\"40\" height=\"40\" alt={auth.displayName} />\n        </DropdownToggle>\n        <DropdownMenu right>\n          <DropdownItem onClick={userSignOut}>Log Out {auth.displayName}\n          </DropdownItem>\n          <DropdownItem divider />\n          <DropdownItem disabled>\n            Option 2\n          </DropdownItem>\n          <DropdownItem divider />\n          <DropdownItem disabled>\n            Reset\n          </DropdownItem>\n        </DropdownMenu>\n      </UncontrolledDropdown>\n    ) : (\n      <NavItem>\n        {/* <NavLink href=\"https://github.com/reactstrap/reactstrap\">GitHub</NavLink> */}\n        {props.auth ?\n          <Button outline onClick={userSignOut}>Log Out {auth.displayName}</Button>\n          :\n          <Button outline onClick={userSignIn}>Log In</Button>\n        }\n      </NavItem>\n    );\n\n    return (\n      // <Navbar color=\"dark\" light expand=\"md\" user={user} dark>\n      <div>\n        <Navbar color=\"dark\" light expand=\"md\" dark >\n          <NavbarBrand href=\"/\">\n            <img src={rpsLogo} height=\"45\" alt=\"Rock Paper Scissors\" />\n          </NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              {/* <NavItem>\n                <NavLink href=\"/components/\">Components</NavLink>\n              </NavItem> */}\n              {userMenu}\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </div>\n    );\n  }\n}\n\n// function mapStateToProps({ auth }) {\n//   return { auth };\n// }\n\n\n// AppNavbar.defaultProps = {\n//   auth: {},\n// };\n\n\nfunction mapStateToProps({ auth, gathering }) {\n  return { auth, gathering };\n}\n\n\nAppNavbar.defaultProps = {\n  auth: {},\n};\n\nAppNavbar.propTypes = {\n  auth: PropTypes.shape({\n    displayName: PropTypes.string,\n    uid: PropTypes.string,\n    photoURL: PropTypes.string,\n  }),\n  signIn: PropTypes.func.isRequired,\n  signOut: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, { signIn, signOut })(AppNavbar);\n","import firebase from '../firebase';\n// import { gathering } from '../firebase';\nimport Gathering from '../gathering';\n// import { FETCH_PLAYERS, JOIN_GATHERING, LEAVE_GATHERING } from './types';\nimport { gatheringActions } from './types';\nimport { createNewGameListener } from './game';\n\n// export const fetchPlayers = (gathering) => dispatch => {\n//   // console.log('in fetchPlayers action, gathering', gathering);\n//   if (gathering != null && typeof gathering.onUpdated === 'function') {\n//     // console.log('found gathering');\n//     gathering.onUpdated((count, players) => { \n//       // console.log(\"gathering players\", players, 'count', count);\n//       const onlinePlayers = count > 0 && players && Object.keys(players).length > 0 ?\n//         Object.keys(players)\n//           // .filter(uid => uid !== user.uid)\n//           .map(uid => ({ ...players[uid], uid })) :\n//         [];\n//       // console.log('dispatching online players ', onlinePlayers);\n//       dispatch({\n//         type: FETCH_PLAYERS,\n//         payload: onlinePlayers\n//       });\n//       // this.setState({ onlinePlayers });\n//     });\n//   }\n//   else {\n//     // console.log('did not find gathering ref');\n//   }\n// };\n\nexport const joinGathering = (user) => dispatch => {\n  // console.log('in joinGathering action, user', user);\n  const gathering = new Gathering(firebase.database(), 'OnlineUsers');\n  // gathering = new Gathering(firebase.database(), 'OnlineUsers');\n  const inGame = false;\n  const { photoURL } = user;\n  // gathering.join(user.id, { displayName: user.displayName, inGame, photoURL });\n  gathering.join(user.uid, { displayName: user.displayName, inGame, photoURL })\n    .then(() => {\n      // console.log('in then clause of joinGathering, gathering:', gathering);\n      // fetchPlayers(gathering);\n      gathering.onUpdated((count, players) => { \n        // console.log(\"gathering players\", players, 'count', count);\n        const onlinePlayers = count > 0 && players && Object.keys(players).length > 0 ?\n          Object.keys(players)\n            // .filter(uid => uid !== user.uid)\n            .map(uid => ({ ...players[uid], uid })) :\n          [];\n        // console.log('dispatching online players ', onlinePlayers);\n        dispatch({\n          type: gatheringActions.FETCH_PLAYERS,\n          payload: onlinePlayers\n        });\n        // this.setState({ onlinePlayers });\n        // get my gathering id\n        // const myGatheringUid = onlinePlayers.find(player => player.uid === user.uid);\n        // dispatch({\n        //   type: 'UPDATE_ID',\n        //   payload: myGatheringUid\n        // });\n      });\n      // createNewGameListener(dispatch, user.uid);\n      dispatch(createNewGameListener(user.uid));\n    })\n    .catch(error => console.log('error when joining gathering', error));\n  // gathering.onUpdated((count, players) => { \n  //   console.log(\"gathering players\", players, 'count', count);\n  //   const onlinePlayers = count > 0 && players && Object.keys(players).length > 0 ?\n  //     Object.keys(players)\n  //       .filter(uid => uid !== user.uid)\n  //       .map(uid => ({ ...players[uid], uid })) :\n  //     [];\n  //   // this.setState({ onlinePlayers });\n  // });\n  dispatch({\n    type: gatheringActions.JOIN_GATHERING,\n    payload: gathering\n    // payload: null\n  });\n};\n\nexport const leaveGathering1 = (user, gathering) => dispatch => {\n  console.log('in leaveGathering action, user', user);\n  // const gathering = \n  gathering.leave();\n  dispatch({\n    type: gatheringActions.LEAVE_GATHERING,\n    payload: null\n  });\n};\n\n\n// export const leaveGathering = () => {\nexport const leaveGathering = (gathering) => dispatch => {\n  // console.log('in leaveGathering action, user', user);\n  // const gathering = \n  // const gathering = new Gathering(firebase.database(), 'OnlineUsers');\n  // const gathering = firebase.database().ref('gatherings/OnlineUsers');\n  // const gathering = firebase.database().ref('gatherings');\n  // gathering.on('value', snapshot => console.log('gathering snapshot:', snapshot.val()));\n  // gathering.leave();\n  if (gathering != null && typeof gathering !== 'undefined') {\n    // console.log('gathering', gathering);\n    gathering.leave();\n    dispatch({\n      type: gatheringActions.LEAVE_GATHERING,\n      // payload: null\n    });\n  }\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nexport default function(ComposedComponent) {\n  class Authentication extends Component {\n    static contextTypes = {\n      router: PropTypes.object\n     };\n\n    componentWillMount() {\n      if (this.props.auth === null) {\n        this.context.router.history.push(\"/\");\n      }\n    }\n\n    componentWillUpdate(nextProps) {\n      // console.log('in componentWillUpdate, nextProps:', nextProps);\n      if (!nextProps.auth) {\n        // console.log('not authenticated');\n        this.context.router.history.push('/');\n      }\n      else {\n        // console.log('user is authenticated');\n      }\n    }\n\n    render() {\n      // console.log('in requireAuth render, this.props', this.props);\n      if (this.props.auth) {\n        return <ComposedComponent {...this.props} />;\n      }\n      else {\n        return null;\n      }\n    }\n  }\n\n  function mapStateToProps(state) {\n    return { auth: state.auth };\n  }\n\n  return connect(mapStateToProps)(Authentication);\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { signIn } from '../actions/user';\nimport \"./SignIn.css\";\n\nimport defaultUserImage from '../img/user.png';\n\nclass Signin extends Component {\n  static contextTypes = {\n    router: PropTypes.object\n  };\n\n  componentWillUpdate(nextProps) {\n    // console.log('in componentWillUpdate for \\'SignIn\\', nextProps', nextProps);\n    if (nextProps.auth) {\n      this.context.router.history.push(\"/app\");\n    }\n  }\n\n  signIn(e) {\n    e.preventDefault();\n    this.props.signIn();\n  }\n\n  render() {\n    return (\n      <div className=\"row social-signin-container\">\n        <div className=\"col s10 offset-s1 center-align\">\n          {/* <img alt=\"Sign in\" id=\"sign-in\" src=\"/img/user.png\" /> */}\n          <img alt=\"Sign in\" id=\"sign-in\" src={defaultUserImage} />\n          <h4 id=\"sign-in-header\">Sign In to start</h4>\n          <a href=\"/#\" className=\"social-signin\" onClick={this.props.signIn}>\n            <i className=\"fa fa-google social-signin-icon\" />\n            Sign in with Google\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ auth }) {\n  return { auth };\n}\n\nexport default connect(mapStateToProps, { signIn })(Signin);\n","import React from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  // CardTitle,\n  // CardText,\n  // CardFooter,\n  // CardHeader,\n} from 'reactstrap';\nimport { connect } from 'react-redux';\n\nimport defaultPlayerImage from '../img/user.png';\n\n// import { joinGathering } from '../actions/gatheringActions';\n\nconst UserList = (props) => {\n  // const { selectPlayer } = props;\n  const { selectPlayer, auth } = props;\n  const players = props.players && Array.isArray(props.players) ? props.players : [];\n\n  // console.log('players', players, 'props', props);\n\n  return (\n    <Card className=\"border-info app\" id=\"available-players\" style={{ display: \"block\" }} >\n      {/* <CardHeader className=\"text-white bg-info\">\n        Other Available Users\n      </CardHeader> */}\n      <CardBody className=\"\">\n        { players.map(player => (\n          <Button\n            key={player.uid}\n            onClick={() => selectPlayer(player.uid)}\n            color=\"primary\"\n            className=\"mr-1\"\n            outline\n            disabled={player.uid === auth.uid}\n          >{ player.uid === auth.uid ? `You (${player.displayName})` : player.displayName} <span> <img src={player.photoURL && player.photoURL.length > 0 ? player.photoURL : defaultPlayerImage} height=\"25\" alt={player.displayName} /></span>\n          </Button>\n        ))}\n      </CardBody>\n      {/* <CardFooter className=\"card-footer\">Select a user to play!</CardFooter> */}\n    </Card>\n  );\n};\n\nfunction mapStateToProps({ auth, gathering }) {\n  const onlinePlayers = gathering != null ? gathering.onlinePlayers || [] : [];\n  return { auth, gathering, players: onlinePlayers };\n}\n\n// export default connect(mapStateToProps, { joinGathering })(UserList);\nexport default connect(mapStateToProps)(UserList);\n","import React, { Component } from 'react';\nimport {\n  // Button,\n  Card,\n  CardBody,\n  // CardTitle,\n  // CardText,\n  CardFooter,\n  CardHeader,\n} from 'reactstrap';\nimport { connect } from 'react-redux';\n\n\nimport { joinGathering, } from '../actions/gatheringActions';\nimport { requestGame } from '../actions/game';\n// import UserList from '../components/UserList';\nimport { PlayerList, Game } from '../components';\n\nclass Main extends Component {\n  // const { users, selectUser } = props;\n  state = {\n  };\n\n  // counter = 0;\n\n  componentDidMount() {\n    const { props: nextProps } = this;\n    console.log('in componentWillUpdate for \\'Main\\', nextProps', nextProps);\n    if (nextProps.auth && !(nextProps.gathering && Object.keys(nextProps.gathering).length > 0)) {\n      console.log('sending joinGathering request');\n      this.props.joinGathering(nextProps.auth);\n      // this.context.router.history.push(\"/app\");\n    }\n    else {\n      console.log('not joining gathering');\n    }\n  }\n\n\n  selectPlayer = (uid) => {\n    const { auth: user, players } = this.props;\n    console.log('creating action request for user, who selected to play against player uid', uid);\n    return this.props.requestGame(user, players.find(player => player.uid === uid));\n  }\n\n\n  render() {\n    const { appStatus, appHeaderText, game } = this.props;\n    const players = this.props.players && Array.isArray(this.props.players) ? this.props.players : [];\n    console.log('rendering main');\n\n    // console.log('players', players, 'this.props', this.props);\n    return (\n      <Card className=\"border-info \" id=\"main\" style={{ display: \"block\" }} >\n        <CardHeader className=\"text-white bg-info\">{appHeaderText || ' '}</CardHeader>\n        <CardBody className=\"\">\n          { game && Object.keys(game).length > 1 && game.gameKey && game.gameKey.length > 1 ?\n            <Game gameUID={game.key} /> :\n            !players || players.length < 0 ? <div>Loading</div> : <PlayerList players=\"players\" selectPlayer={this.selectPlayer} /> }\n        </CardBody>\n        <CardFooter className=\"card-footer\">{appStatus || ' '}</CardFooter>\n      </Card>\n    );\n  }\n}\n\nfunction mapStateToProps({ auth, gathering, game }) {\n  const onlinePlayers = gathering != null ? gathering.onlinePlayers || [] : [];\n  return {\n    auth,\n    gathering,\n    players: onlinePlayers,\n    game\n  };\n}\n\nexport default connect(mapStateToProps, { joinGathering, requestGame })(Main);\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport './App.css';\nimport Main from './pages/Main';\nimport { Navbar, SignIn, requireAuth } from './components';\n\nimport { fetchUser } from './actions/user';\n\nexport class UnconnectedApp extends Component {\n  componentDidMount = () => {\n    // this.props.fetchUser && typeof this.props.fetchUser === 'function' && this.props.fetchUser();\n    this.props.fetchUser();\n  }\n\n  render() {\n    console.log('rendering App component');\n    console.log(`Your process.env.PUBLIC_URL: '${process.env.PUBLIC_URL}'`);\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <Navbar />\n          <div className=\"container main\">\n            <Route exact path=\"/\" component={SignIn} />\n            <Route path=\"/app\" component={requireAuth(Main)} />\n          </div>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\n// export default App;\nexport default connect(null, { fetchUser })(UnconnectedApp);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport reducers from './reducers';\nimport './index.css';\nimport App from './App';\n\n// import * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducers, {}, applyMiddleware(reduxThunk));\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\nReactDOM.render(<Provider store={store}> <App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}